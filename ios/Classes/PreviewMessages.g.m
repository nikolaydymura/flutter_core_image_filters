// Copyright 2022
// Autogenerated from Pigeon (v10.1.6), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#import "PreviewMessages.g.h"

#if TARGET_OS_OSX
#import <FlutterMacOS/FlutterMacOS.h>
#else
#import <Flutter/Flutter.h>
#endif

#if !__has_feature(objc_arc)
#error File requires ARC to be enabled.
#endif

static NSArray *wrapResult(id result, FlutterError *error) {
  if (error) {
    return @[
      error.code ?: [NSNull null], error.message ?: [NSNull null], error.details ?: [NSNull null]
    ];
  }
  return @[ result ?: [NSNull null] ];
}
static id GetNullableObjectAtIndex(NSArray *array, NSInteger key) {
  id result = array[key];
  return (result == [NSNull null]) ? nil : result;
}

NSObject<FlutterMessageCodec> *FLTImagePreviewApiGetCodec(void) {
  static FlutterStandardMessageCodec *sSharedObject = nil;
  sSharedObject = [FlutterStandardMessageCodec sharedInstance];
  return sSharedObject;
}

void FLTImagePreviewApiSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<FLTImagePreviewApi> *api) {
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.flutter_core_image_filters.ImagePreviewApi.create"
        binaryMessenger:binaryMessenger
        codec:FLTImagePreviewApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(create:)], @"FLTImagePreviewApi api (%@) doesn't respond to @selector(create:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        NSNumber *output = [api create:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.flutter_core_image_filters.ImagePreviewApi.connect"
        binaryMessenger:binaryMessenger
        codec:FLTImagePreviewApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(connect: : :error:)], @"FLTImagePreviewApi api (%@) doesn't respond to @selector(connect: : :error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSNumber *arg_textureId = GetNullableObjectAtIndex(args, 0);
        NSArray<NSNumber *> *arg_filters = GetNullableObjectAtIndex(args, 1);
        NSString *arg_context = GetNullableObjectAtIndex(args, 2);
        FlutterError *error;
        [api connect:arg_textureId  :arg_filters  :arg_context error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.flutter_core_image_filters.ImagePreviewApi.disconnect"
        binaryMessenger:binaryMessenger
        codec:FLTImagePreviewApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(disconnect:error:)], @"FLTImagePreviewApi api (%@) doesn't respond to @selector(disconnect:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSNumber *arg_textureId = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api disconnect:arg_textureId error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.flutter_core_image_filters.ImagePreviewApi.setSourceAsset"
        binaryMessenger:binaryMessenger
        codec:FLTImagePreviewApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setSource: asset:error:)], @"FLTImagePreviewApi api (%@) doesn't respond to @selector(setSource: asset:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSNumber *arg_textureId = GetNullableObjectAtIndex(args, 0);
        NSString *arg_path = GetNullableObjectAtIndex(args, 1);
        FlutterError *error;
        [api setSource:arg_textureId  asset:arg_path error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.flutter_core_image_filters.ImagePreviewApi.setSourceFile"
        binaryMessenger:binaryMessenger
        codec:FLTImagePreviewApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setSource: path:error:)], @"FLTImagePreviewApi api (%@) doesn't respond to @selector(setSource: path:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSNumber *arg_textureId = GetNullableObjectAtIndex(args, 0);
        NSString *arg_path = GetNullableObjectAtIndex(args, 1);
        FlutterError *error;
        [api setSource:arg_textureId  path:arg_path error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.flutter_core_image_filters.ImagePreviewApi.setData"
        binaryMessenger:binaryMessenger
        codec:FLTImagePreviewApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setSource: data:error:)], @"FLTImagePreviewApi api (%@) doesn't respond to @selector(setSource: data:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSNumber *arg_textureId = GetNullableObjectAtIndex(args, 0);
        FlutterStandardTypedData *arg_data = GetNullableObjectAtIndex(args, 1);
        FlutterError *error;
        [api setSource:arg_textureId  data:arg_data error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.flutter_core_image_filters.ImagePreviewApi.setOutput"
        binaryMessenger:binaryMessenger
        codec:FLTImagePreviewApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setOutput: :error:)], @"FLTImagePreviewApi api (%@) doesn't respond to @selector(setOutput: :error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSNumber *arg_textureId = GetNullableObjectAtIndex(args, 0);
        NSArray<NSNumber *> *arg_value = GetNullableObjectAtIndex(args, 1);
        FlutterError *error;
        [api setOutput:arg_textureId  :arg_value error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.flutter_core_image_filters.ImagePreviewApi.dispose"
        binaryMessenger:binaryMessenger
        codec:FLTImagePreviewApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(dispose:error:)], @"FLTImagePreviewApi api (%@) doesn't respond to @selector(dispose:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSNumber *arg_textureId = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api dispose:arg_textureId error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
}
NSObject<FlutterMessageCodec> *FLTVideoPreviewApiGetCodec(void) {
  static FlutterStandardMessageCodec *sSharedObject = nil;
  sSharedObject = [FlutterStandardMessageCodec sharedInstance];
  return sSharedObject;
}

void FLTVideoPreviewApiSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<FLTVideoPreviewApi> *api) {
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.flutter_core_image_filters.VideoPreviewApi.create"
        binaryMessenger:binaryMessenger
        codec:FLTVideoPreviewApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(create:)], @"FLTVideoPreviewApi api (%@) doesn't respond to @selector(create:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        NSNumber *output = [api create:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.flutter_core_image_filters.VideoPreviewApi.connect"
        binaryMessenger:binaryMessenger
        codec:FLTVideoPreviewApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(connect: : :error:)], @"FLTVideoPreviewApi api (%@) doesn't respond to @selector(connect: : :error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSNumber *arg_textureId = GetNullableObjectAtIndex(args, 0);
        NSArray<NSNumber *> *arg_filters = GetNullableObjectAtIndex(args, 1);
        NSString *arg_context = GetNullableObjectAtIndex(args, 2);
        FlutterError *error;
        [api connect:arg_textureId  :arg_filters  :arg_context error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.flutter_core_image_filters.VideoPreviewApi.disconnect"
        binaryMessenger:binaryMessenger
        codec:FLTVideoPreviewApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(disconnect:error:)], @"FLTVideoPreviewApi api (%@) doesn't respond to @selector(disconnect:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSNumber *arg_textureId = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api disconnect:arg_textureId error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.flutter_core_image_filters.VideoPreviewApi.setSourceAsset"
        binaryMessenger:binaryMessenger
        codec:FLTVideoPreviewApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setSource: asset:error:)], @"FLTVideoPreviewApi api (%@) doesn't respond to @selector(setSource: asset:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSNumber *arg_textureId = GetNullableObjectAtIndex(args, 0);
        NSString *arg_path = GetNullableObjectAtIndex(args, 1);
        FlutterError *error;
        [api setSource:arg_textureId  asset:arg_path error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.flutter_core_image_filters.VideoPreviewApi.setSourceFile"
        binaryMessenger:binaryMessenger
        codec:FLTVideoPreviewApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setSource: path:error:)], @"FLTVideoPreviewApi api (%@) doesn't respond to @selector(setSource: path:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSNumber *arg_textureId = GetNullableObjectAtIndex(args, 0);
        NSString *arg_path = GetNullableObjectAtIndex(args, 1);
        FlutterError *error;
        [api setSource:arg_textureId  path:arg_path error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.flutter_core_image_filters.VideoPreviewApi.resume"
        binaryMessenger:binaryMessenger
        codec:FLTVideoPreviewApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(resume:error:)], @"FLTVideoPreviewApi api (%@) doesn't respond to @selector(resume:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSNumber *arg_textureId = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api resume:arg_textureId error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.flutter_core_image_filters.VideoPreviewApi.pause"
        binaryMessenger:binaryMessenger
        codec:FLTVideoPreviewApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(pause:error:)], @"FLTVideoPreviewApi api (%@) doesn't respond to @selector(pause:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSNumber *arg_textureId = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api pause:arg_textureId error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.flutter_core_image_filters.VideoPreviewApi.dispose"
        binaryMessenger:binaryMessenger
        codec:FLTVideoPreviewApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(dispose:error:)], @"FLTVideoPreviewApi api (%@) doesn't respond to @selector(dispose:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSNumber *arg_textureId = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api dispose:arg_textureId error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
}
