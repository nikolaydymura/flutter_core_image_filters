// Copyright 2022
// Autogenerated from Pigeon (v12.0.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation
#if os(iOS)
import Flutter
#elseif os(macOS)
import FlutterMacOS
#else
#error("Unsupported platform.")
#endif

private func isNullish(_ value: Any?) -> Bool {
  return value is NSNull || value == nil
}

private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)"
  ]
}

private func nilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return value as! T?
}
/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol FilterApi {
  func createFilter(_ name: String) throws -> Int64
  func exportData(_ filters: [Int64], _ format: String, _ context: String, _ value: [Double]?) throws -> FlutterStandardTypedData
  func exportImageFile(_ filters: [Int64], _ path: String, _ format: String, _ context: String, _ value: [Double]?) throws
  func exportVideoFile(_ filters: [Int64], _ asset: Bool, _ input: String, _ output: String, _ format: String, _ context: String, _ preset: String, _ period: Double) throws -> Int64
  func setInputData(_ filterId: Int64, _ data: FlutterStandardTypedData) throws
  func setInputAsset(_ filterId: Int64, _ path: String) throws
  func setInputFile(_ filterId: Int64, _ path: String) throws
  func setNSNumberParameter(_ filterId: Int64, _ key: String, _ value: Double) throws
  func setCIColorParameter(_ filterId: Int64, _ key: String, _ value: [Double]) throws
  func setNSValueParameter(_ filterId: Int64, _ key: String, _ value: [Double]) throws
  func setCIVectorParameter(_ filterId: Int64, _ key: String, _ value: [Double]) throws
  func setCIImageDataParameter(_ filterId: Int64, _ key: String, _ data: FlutterStandardTypedData) throws
  func setCIImageSourceParameter(_ filterId: Int64, _ key: String, _ asset: Bool, _ path: String) throws
  func setCIImageCubeDataParameter(_ filterId: Int64, _ key: String, _ data: FlutterStandardTypedData, _ size: Int64, _ columns: Int64, _ rows: Int64) throws
  func setCIImageCubeSourceParameter(_ filterId: Int64, _ key: String, _ asset: Bool, _ path: String, _ size: Int64, _ columns: Int64, _ rows: Int64) throws
  func setNSDataParameter(_ filterId: Int64, _ key: String, _ data: FlutterStandardTypedData) throws
  func setNSDataSourceParameter(_ filterId: Int64, _ key: String, _ asset: Bool, _ path: String) throws
  func setNSStringParameter(_ filterId: Int64, _ key: String, _ value: String) throws
  func disposeFilter(_ filterId: Int64) throws
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class FilterApiSetup {
  /// The codec used by FilterApi.
  /// Sets up an instance of `FilterApi` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: FilterApi?) {
    let createChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_core_image_filters.FilterApi.create", binaryMessenger: binaryMessenger)
    if let api = api {
      createChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let nameArg = args[0] as! String
        do {
          let result = try api.createFilter(nameArg)
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      createChannel.setMessageHandler(nil)
    }
    let exportDataChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_core_image_filters.FilterApi.exportData", binaryMessenger: binaryMessenger)
    if let api = api {
      exportDataChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let filtersArg = args[0] as! [Int64]
        let formatArg = args[1] as! String
        let contextArg = args[2] as! String
        let valueArg: [Double]? = nilOrValue(args[3])
        do {
          let result = try api.exportData(filtersArg, formatArg, contextArg, valueArg)
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      exportDataChannel.setMessageHandler(nil)
    }
    let exportImageFileChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_core_image_filters.FilterApi.exportImageFile", binaryMessenger: binaryMessenger)
    if let api = api {
      exportImageFileChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let filtersArg = args[0] as! [Int64]
        let pathArg = args[1] as! String
        let formatArg = args[2] as! String
        let contextArg = args[3] as! String
        let valueArg: [Double]? = nilOrValue(args[4])
        do {
          try api.exportImageFile(filtersArg, pathArg, formatArg, contextArg, valueArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      exportImageFileChannel.setMessageHandler(nil)
    }
    let exportVideoFileChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_core_image_filters.FilterApi.exportVideoFile", binaryMessenger: binaryMessenger)
    if let api = api {
      exportVideoFileChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let filtersArg = args[0] as! [Int64]
        let assetArg = args[1] as! Bool
        let inputArg = args[2] as! String
        let outputArg = args[3] as! String
        let formatArg = args[4] as! String
        let contextArg = args[5] as! String
        let presetArg = args[6] as! String
        let periodArg = args[7] as! Double
        do {
          let result = try api.exportVideoFile(filtersArg, assetArg, inputArg, outputArg, formatArg, contextArg, presetArg, periodArg)
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      exportVideoFileChannel.setMessageHandler(nil)
    }
    let setInputDataChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_core_image_filters.FilterApi.setInputData", binaryMessenger: binaryMessenger)
    if let api = api {
      setInputDataChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let filterIdArg = args[0] is Int64 ? args[0] as! Int64 : Int64(args[0] as! Int32)
        let dataArg = args[1] as! FlutterStandardTypedData
        do {
          try api.setInputData(filterIdArg, dataArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      setInputDataChannel.setMessageHandler(nil)
    }
    let setInputAssetChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_core_image_filters.FilterApi.setInputAsset", binaryMessenger: binaryMessenger)
    if let api = api {
      setInputAssetChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let filterIdArg = args[0] is Int64 ? args[0] as! Int64 : Int64(args[0] as! Int32)
        let pathArg = args[1] as! String
        do {
          try api.setInputAsset(filterIdArg, pathArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      setInputAssetChannel.setMessageHandler(nil)
    }
    let setInputFileChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_core_image_filters.FilterApi.setInputFile", binaryMessenger: binaryMessenger)
    if let api = api {
      setInputFileChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let filterIdArg = args[0] is Int64 ? args[0] as! Int64 : Int64(args[0] as! Int32)
        let pathArg = args[1] as! String
        do {
          try api.setInputFile(filterIdArg, pathArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      setInputFileChannel.setMessageHandler(nil)
    }
    let setNSNumberParameterChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_core_image_filters.FilterApi.setNSNumberParameter", binaryMessenger: binaryMessenger)
    if let api = api {
      setNSNumberParameterChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let filterIdArg = args[0] is Int64 ? args[0] as! Int64 : Int64(args[0] as! Int32)
        let keyArg = args[1] as! String
        let valueArg = args[2] as! Double
        do {
          try api.setNSNumberParameter(filterIdArg, keyArg, valueArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      setNSNumberParameterChannel.setMessageHandler(nil)
    }
    let setCIColorParameterChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_core_image_filters.FilterApi.setCIColorParameter", binaryMessenger: binaryMessenger)
    if let api = api {
      setCIColorParameterChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let filterIdArg = args[0] is Int64 ? args[0] as! Int64 : Int64(args[0] as! Int32)
        let keyArg = args[1] as! String
        let valueArg = args[2] as! [Double]
        do {
          try api.setCIColorParameter(filterIdArg, keyArg, valueArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      setCIColorParameterChannel.setMessageHandler(nil)
    }
    let setNSValueParameterChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_core_image_filters.FilterApi.setNSValueParameter", binaryMessenger: binaryMessenger)
    if let api = api {
      setNSValueParameterChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let filterIdArg = args[0] is Int64 ? args[0] as! Int64 : Int64(args[0] as! Int32)
        let keyArg = args[1] as! String
        let valueArg = args[2] as! [Double]
        do {
          try api.setNSValueParameter(filterIdArg, keyArg, valueArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      setNSValueParameterChannel.setMessageHandler(nil)
    }
    let setCIVectorParameterChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_core_image_filters.FilterApi.setCIVectorParameter", binaryMessenger: binaryMessenger)
    if let api = api {
      setCIVectorParameterChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let filterIdArg = args[0] is Int64 ? args[0] as! Int64 : Int64(args[0] as! Int32)
        let keyArg = args[1] as! String
        let valueArg = args[2] as! [Double]
        do {
          try api.setCIVectorParameter(filterIdArg, keyArg, valueArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      setCIVectorParameterChannel.setMessageHandler(nil)
    }
    let setCIImageDataParameterChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_core_image_filters.FilterApi.setCIImageDataParameter", binaryMessenger: binaryMessenger)
    if let api = api {
      setCIImageDataParameterChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let filterIdArg = args[0] is Int64 ? args[0] as! Int64 : Int64(args[0] as! Int32)
        let keyArg = args[1] as! String
        let dataArg = args[2] as! FlutterStandardTypedData
        do {
          try api.setCIImageDataParameter(filterIdArg, keyArg, dataArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      setCIImageDataParameterChannel.setMessageHandler(nil)
    }
    let setCIImageSourceParameterChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_core_image_filters.FilterApi.setCIImageSourceParameter", binaryMessenger: binaryMessenger)
    if let api = api {
      setCIImageSourceParameterChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let filterIdArg = args[0] is Int64 ? args[0] as! Int64 : Int64(args[0] as! Int32)
        let keyArg = args[1] as! String
        let assetArg = args[2] as! Bool
        let pathArg = args[3] as! String
        do {
          try api.setCIImageSourceParameter(filterIdArg, keyArg, assetArg, pathArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      setCIImageSourceParameterChannel.setMessageHandler(nil)
    }
    let setCIImageCubeDataParameterChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_core_image_filters.FilterApi.setCIImageCubeDataParameter", binaryMessenger: binaryMessenger)
    if let api = api {
      setCIImageCubeDataParameterChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let filterIdArg = args[0] is Int64 ? args[0] as! Int64 : Int64(args[0] as! Int32)
        let keyArg = args[1] as! String
        let dataArg = args[2] as! FlutterStandardTypedData
        let sizeArg = args[3] is Int64 ? args[3] as! Int64 : Int64(args[3] as! Int32)
        let columnsArg = args[4] is Int64 ? args[4] as! Int64 : Int64(args[4] as! Int32)
        let rowsArg = args[5] is Int64 ? args[5] as! Int64 : Int64(args[5] as! Int32)
        do {
          try api.setCIImageCubeDataParameter(filterIdArg, keyArg, dataArg, sizeArg, columnsArg, rowsArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      setCIImageCubeDataParameterChannel.setMessageHandler(nil)
    }
    let setCIImageCubeSourceParameterChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_core_image_filters.FilterApi.setCIImageCubeSourceParameter", binaryMessenger: binaryMessenger)
    if let api = api {
      setCIImageCubeSourceParameterChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let filterIdArg = args[0] is Int64 ? args[0] as! Int64 : Int64(args[0] as! Int32)
        let keyArg = args[1] as! String
        let assetArg = args[2] as! Bool
        let pathArg = args[3] as! String
        let sizeArg = args[4] is Int64 ? args[4] as! Int64 : Int64(args[4] as! Int32)
        let columnsArg = args[5] is Int64 ? args[5] as! Int64 : Int64(args[5] as! Int32)
        let rowsArg = args[6] is Int64 ? args[6] as! Int64 : Int64(args[6] as! Int32)
        do {
          try api.setCIImageCubeSourceParameter(filterIdArg, keyArg, assetArg, pathArg, sizeArg, columnsArg, rowsArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      setCIImageCubeSourceParameterChannel.setMessageHandler(nil)
    }
    let setNSDataParameterChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_core_image_filters.FilterApi.setNSDataParameter", binaryMessenger: binaryMessenger)
    if let api = api {
      setNSDataParameterChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let filterIdArg = args[0] is Int64 ? args[0] as! Int64 : Int64(args[0] as! Int32)
        let keyArg = args[1] as! String
        let dataArg = args[2] as! FlutterStandardTypedData
        do {
          try api.setNSDataParameter(filterIdArg, keyArg, dataArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      setNSDataParameterChannel.setMessageHandler(nil)
    }
    let setNSDataSourceParameterChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_core_image_filters.FilterApi.setNSDataSourceParameter", binaryMessenger: binaryMessenger)
    if let api = api {
      setNSDataSourceParameterChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let filterIdArg = args[0] is Int64 ? args[0] as! Int64 : Int64(args[0] as! Int32)
        let keyArg = args[1] as! String
        let assetArg = args[2] as! Bool
        let pathArg = args[3] as! String
        do {
          try api.setNSDataSourceParameter(filterIdArg, keyArg, assetArg, pathArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      setNSDataSourceParameterChannel.setMessageHandler(nil)
    }
    let setNSStringParameterChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_core_image_filters.FilterApi.setNSStringParameter", binaryMessenger: binaryMessenger)
    if let api = api {
      setNSStringParameterChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let filterIdArg = args[0] is Int64 ? args[0] as! Int64 : Int64(args[0] as! Int32)
        let keyArg = args[1] as! String
        let valueArg = args[2] as! String
        do {
          try api.setNSStringParameter(filterIdArg, keyArg, valueArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      setNSStringParameterChannel.setMessageHandler(nil)
    }
    let disposeChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_core_image_filters.FilterApi.dispose", binaryMessenger: binaryMessenger)
    if let api = api {
      disposeChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let filterIdArg = args[0] is Int64 ? args[0] as! Int64 : Int64(args[0] as! Int32)
        do {
          try api.disposeFilter(filterIdArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      disposeChannel.setMessageHandler(nil)
    }
  }
}
