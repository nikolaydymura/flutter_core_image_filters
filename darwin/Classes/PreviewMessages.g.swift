// Copyright 2022
// Autogenerated from Pigeon (v25.3.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation

#if os(iOS)
  import Flutter
#elseif os(macOS)
  import FlutterMacOS
#else
  #error("Unsupported platform.")
#endif

/// Error class for passing custom error details to Dart side.
final class PigeonError: Error {
  let code: String
  let message: String?
  let details: Sendable?

  init(code: String, message: String?, details: Sendable?) {
    self.code = code
    self.message = message
    self.details = details
  }

  var localizedDescription: String {
    return
      "PigeonError(code: \(code), message: \(message ?? "<nil>"), details: \(details ?? "<nil>")"
  }
}

private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let pigeonError = error as? PigeonError {
    return [
      pigeonError.code,
      pigeonError.message,
      pigeonError.details,
    ]
  }
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details,
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)",
  ]
}

private func isNullish(_ value: Any?) -> Bool {
  return value is NSNull || value == nil
}

private func nilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return value as! T?
}


private class PreviewMessagesPigeonCodecReader: FlutterStandardReader {
}

private class PreviewMessagesPigeonCodecWriter: FlutterStandardWriter {
}

private class PreviewMessagesPigeonCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return PreviewMessagesPigeonCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return PreviewMessagesPigeonCodecWriter(data: data)
  }
}

class PreviewMessagesPigeonCodec: FlutterStandardMessageCodec, @unchecked Sendable {
  static let shared = PreviewMessagesPigeonCodec(readerWriter: PreviewMessagesPigeonCodecReaderWriter())
}

/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol ImagePreviewApi {
  func create() throws -> Int64
  func connect(_ textureId: Int64, _ filters: [Int64], _ context: String) throws
  func disconnect(_ textureId: Int64) throws
  func setSource(_ textureId: Int64, asset path: String) throws
  func setSource(_ textureId: Int64, path: String) throws
  func setSource(_ textureId: Int64, data: FlutterStandardTypedData) throws
  func setOutput(_ textureId: Int64, _ value: [Double]) throws
  func dispose(_ textureId: Int64) throws
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class ImagePreviewApiSetup {
  static var codec: FlutterStandardMessageCodec { PreviewMessagesPigeonCodec.shared }
  /// Sets up an instance of `ImagePreviewApi` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: ImagePreviewApi?, messageChannelSuffix: String = "") {
    let channelSuffix = messageChannelSuffix.count > 0 ? ".\(messageChannelSuffix)" : ""
    let createChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_core_image_filters.ImagePreviewApi.create\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      createChannel.setMessageHandler { _, reply in
        do {
          let result = try api.create()
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      createChannel.setMessageHandler(nil)
    }
    let connectChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_core_image_filters.ImagePreviewApi.connect\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      connectChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let textureIdArg = args[0] as! Int64
        let filtersArg = args[1] as! [Int64]
        let contextArg = args[2] as! String
        do {
          try api.connect(textureIdArg, filtersArg, contextArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      connectChannel.setMessageHandler(nil)
    }
    let disconnectChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_core_image_filters.ImagePreviewApi.disconnect\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      disconnectChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let textureIdArg = args[0] as! Int64
        do {
          try api.disconnect(textureIdArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      disconnectChannel.setMessageHandler(nil)
    }
    let setSourceAssetChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_core_image_filters.ImagePreviewApi.setSourceAsset\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      setSourceAssetChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let textureIdArg = args[0] as! Int64
        let pathArg = args[1] as! String
        do {
          try api.setSource(textureIdArg, asset: pathArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      setSourceAssetChannel.setMessageHandler(nil)
    }
    let setSourceFileChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_core_image_filters.ImagePreviewApi.setSourceFile\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      setSourceFileChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let textureIdArg = args[0] as! Int64
        let pathArg = args[1] as! String
        do {
          try api.setSource(textureIdArg, path: pathArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      setSourceFileChannel.setMessageHandler(nil)
    }
    let setDataChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_core_image_filters.ImagePreviewApi.setData\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      setDataChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let textureIdArg = args[0] as! Int64
        let dataArg = args[1] as! FlutterStandardTypedData
        do {
          try api.setSource(textureIdArg, data: dataArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      setDataChannel.setMessageHandler(nil)
    }
    let setOutputChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_core_image_filters.ImagePreviewApi.setOutput\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      setOutputChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let textureIdArg = args[0] as! Int64
        let valueArg = args[1] as! [Double]
        do {
          try api.setOutput(textureIdArg, valueArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      setOutputChannel.setMessageHandler(nil)
    }
    let disposeChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_core_image_filters.ImagePreviewApi.dispose\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      disposeChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let textureIdArg = args[0] as! Int64
        do {
          try api.dispose(textureIdArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      disposeChannel.setMessageHandler(nil)
    }
  }
}
/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol VideoPreviewApi {
  func create() throws -> Int64
  func connect(_ textureId: Int64, _ filters: [Int64], _ context: String) throws
  func disconnect(_ textureId: Int64) throws
  func setSource(_ textureId: Int64, asset path: String) throws
  func setSource(_ textureId: Int64, path: String) throws
  func resume(_ textureId: Int64) throws
  func pause(_ textureId: Int64) throws
  func dispose(_ textureId: Int64) throws
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class VideoPreviewApiSetup {
  static var codec: FlutterStandardMessageCodec { PreviewMessagesPigeonCodec.shared }
  /// Sets up an instance of `VideoPreviewApi` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: VideoPreviewApi?, messageChannelSuffix: String = "") {
    let channelSuffix = messageChannelSuffix.count > 0 ? ".\(messageChannelSuffix)" : ""
    let createChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_core_image_filters.VideoPreviewApi.create\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      createChannel.setMessageHandler { _, reply in
        do {
          let result = try api.create()
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      createChannel.setMessageHandler(nil)
    }
    let connectChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_core_image_filters.VideoPreviewApi.connect\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      connectChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let textureIdArg = args[0] as! Int64
        let filtersArg = args[1] as! [Int64]
        let contextArg = args[2] as! String
        do {
          try api.connect(textureIdArg, filtersArg, contextArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      connectChannel.setMessageHandler(nil)
    }
    let disconnectChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_core_image_filters.VideoPreviewApi.disconnect\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      disconnectChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let textureIdArg = args[0] as! Int64
        do {
          try api.disconnect(textureIdArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      disconnectChannel.setMessageHandler(nil)
    }
    let setSourceAssetChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_core_image_filters.VideoPreviewApi.setSourceAsset\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      setSourceAssetChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let textureIdArg = args[0] as! Int64
        let pathArg = args[1] as! String
        do {
          try api.setSource(textureIdArg, asset: pathArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      setSourceAssetChannel.setMessageHandler(nil)
    }
    let setSourceFileChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_core_image_filters.VideoPreviewApi.setSourceFile\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      setSourceFileChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let textureIdArg = args[0] as! Int64
        let pathArg = args[1] as! String
        do {
          try api.setSource(textureIdArg, path: pathArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      setSourceFileChannel.setMessageHandler(nil)
    }
    let resumeChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_core_image_filters.VideoPreviewApi.resume\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      resumeChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let textureIdArg = args[0] as! Int64
        do {
          try api.resume(textureIdArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      resumeChannel.setMessageHandler(nil)
    }
    let pauseChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_core_image_filters.VideoPreviewApi.pause\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      pauseChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let textureIdArg = args[0] as! Int64
        do {
          try api.pause(textureIdArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      pauseChannel.setMessageHandler(nil)
    }
    let disposeChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_core_image_filters.VideoPreviewApi.dispose\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      disposeChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let textureIdArg = args[0] as! Int64
        do {
          try api.dispose(textureIdArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      disposeChannel.setMessageHandler(nil)
    }
  }
}
