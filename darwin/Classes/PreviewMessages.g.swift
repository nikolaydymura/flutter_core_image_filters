// Copyright 2022
// Autogenerated from Pigeon (v12.0.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation
#if os(iOS)
import Flutter
#elseif os(macOS)
import FlutterMacOS
#else
#error("Unsupported platform.")
#endif

private func isNullish(_ value: Any?) -> Bool {
  return value is NSNull || value == nil
}

private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)"
  ]
}

private func nilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return value as! T?
}
/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol ImagePreviewApi {
  func create() throws -> Int64
  func connect(_ textureId: Int64, _ filters: [Int64], _ context: String) throws
  func disconnect(_ textureId: Int64) throws
  func setSource(_ textureId: Int64, asset path: String) throws
  func setSource(_ textureId: Int64, path: String) throws
  func setSource(_ textureId: Int64, data: FlutterStandardTypedData) throws
  func setOutput(_ textureId: Int64, _ value: [Double]) throws
  func dispose(_ textureId: Int64) throws
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class ImagePreviewApiSetup {
  /// The codec used by ImagePreviewApi.
  /// Sets up an instance of `ImagePreviewApi` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: ImagePreviewApi?) {
    let createChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_core_image_filters.ImagePreviewApi.create", binaryMessenger: binaryMessenger)
    if let api = api {
      createChannel.setMessageHandler { _, reply in
        do {
          let result = try api.create()
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      createChannel.setMessageHandler(nil)
    }
    let connectChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_core_image_filters.ImagePreviewApi.connect", binaryMessenger: binaryMessenger)
    if let api = api {
      connectChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let textureIdArg = args[0] is Int64 ? args[0] as! Int64 : Int64(args[0] as! Int32)
        let filtersArg = args[1] as! [Int64]
        let contextArg = args[2] as! String
        do {
          try api.connect(textureIdArg, filtersArg, contextArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      connectChannel.setMessageHandler(nil)
    }
    let disconnectChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_core_image_filters.ImagePreviewApi.disconnect", binaryMessenger: binaryMessenger)
    if let api = api {
      disconnectChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let textureIdArg = args[0] is Int64 ? args[0] as! Int64 : Int64(args[0] as! Int32)
        do {
          try api.disconnect(textureIdArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      disconnectChannel.setMessageHandler(nil)
    }
    let setSourceAssetChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_core_image_filters.ImagePreviewApi.setSourceAsset", binaryMessenger: binaryMessenger)
    if let api = api {
      setSourceAssetChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let textureIdArg = args[0] is Int64 ? args[0] as! Int64 : Int64(args[0] as! Int32)
        let pathArg = args[1] as! String
        do {
          try api.setSource(textureIdArg, asset: pathArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      setSourceAssetChannel.setMessageHandler(nil)
    }
    let setSourceFileChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_core_image_filters.ImagePreviewApi.setSourceFile", binaryMessenger: binaryMessenger)
    if let api = api {
      setSourceFileChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let textureIdArg = args[0] is Int64 ? args[0] as! Int64 : Int64(args[0] as! Int32)
        let pathArg = args[1] as! String
        do {
          try api.setSource(textureIdArg, path: pathArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      setSourceFileChannel.setMessageHandler(nil)
    }
    let setDataChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_core_image_filters.ImagePreviewApi.setData", binaryMessenger: binaryMessenger)
    if let api = api {
      setDataChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let textureIdArg = args[0] is Int64 ? args[0] as! Int64 : Int64(args[0] as! Int32)
        let dataArg = args[1] as! FlutterStandardTypedData
        do {
          try api.setSource(textureIdArg, data: dataArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      setDataChannel.setMessageHandler(nil)
    }
    let setOutputChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_core_image_filters.ImagePreviewApi.setOutput", binaryMessenger: binaryMessenger)
    if let api = api {
      setOutputChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let textureIdArg = args[0] is Int64 ? args[0] as! Int64 : Int64(args[0] as! Int32)
        let valueArg = args[1] as! [Double]
        do {
          try api.setOutput(textureIdArg, valueArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      setOutputChannel.setMessageHandler(nil)
    }
    let disposeChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_core_image_filters.ImagePreviewApi.dispose", binaryMessenger: binaryMessenger)
    if let api = api {
      disposeChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let textureIdArg = args[0] is Int64 ? args[0] as! Int64 : Int64(args[0] as! Int32)
        do {
          try api.dispose(textureIdArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      disposeChannel.setMessageHandler(nil)
    }
  }
}
/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol VideoPreviewApi {
  func create() throws -> Int64
  func connect(_ textureId: Int64, _ filters: [Int64], _ context: String) throws
  func disconnect(_ textureId: Int64) throws
  func setSource(_ textureId: Int64, asset path: String) throws
  func setSource(_ textureId: Int64, path: String) throws
  func resume(_ textureId: Int64) throws
  func pause(_ textureId: Int64) throws
  func dispose(_ textureId: Int64) throws
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class VideoPreviewApiSetup {
  /// The codec used by VideoPreviewApi.
  /// Sets up an instance of `VideoPreviewApi` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: VideoPreviewApi?) {
    let createChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_core_image_filters.VideoPreviewApi.create", binaryMessenger: binaryMessenger)
    if let api = api {
      createChannel.setMessageHandler { _, reply in
        do {
          let result = try api.create()
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      createChannel.setMessageHandler(nil)
    }
    let connectChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_core_image_filters.VideoPreviewApi.connect", binaryMessenger: binaryMessenger)
    if let api = api {
      connectChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let textureIdArg = args[0] is Int64 ? args[0] as! Int64 : Int64(args[0] as! Int32)
        let filtersArg = args[1] as! [Int64]
        let contextArg = args[2] as! String
        do {
          try api.connect(textureIdArg, filtersArg, contextArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      connectChannel.setMessageHandler(nil)
    }
    let disconnectChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_core_image_filters.VideoPreviewApi.disconnect", binaryMessenger: binaryMessenger)
    if let api = api {
      disconnectChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let textureIdArg = args[0] is Int64 ? args[0] as! Int64 : Int64(args[0] as! Int32)
        do {
          try api.disconnect(textureIdArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      disconnectChannel.setMessageHandler(nil)
    }
    let setSourceAssetChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_core_image_filters.VideoPreviewApi.setSourceAsset", binaryMessenger: binaryMessenger)
    if let api = api {
      setSourceAssetChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let textureIdArg = args[0] is Int64 ? args[0] as! Int64 : Int64(args[0] as! Int32)
        let pathArg = args[1] as! String
        do {
          try api.setSource(textureIdArg, asset: pathArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      setSourceAssetChannel.setMessageHandler(nil)
    }
    let setSourceFileChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_core_image_filters.VideoPreviewApi.setSourceFile", binaryMessenger: binaryMessenger)
    if let api = api {
      setSourceFileChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let textureIdArg = args[0] is Int64 ? args[0] as! Int64 : Int64(args[0] as! Int32)
        let pathArg = args[1] as! String
        do {
          try api.setSource(textureIdArg, path: pathArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      setSourceFileChannel.setMessageHandler(nil)
    }
    let resumeChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_core_image_filters.VideoPreviewApi.resume", binaryMessenger: binaryMessenger)
    if let api = api {
      resumeChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let textureIdArg = args[0] is Int64 ? args[0] as! Int64 : Int64(args[0] as! Int32)
        do {
          try api.resume(textureIdArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      resumeChannel.setMessageHandler(nil)
    }
    let pauseChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_core_image_filters.VideoPreviewApi.pause", binaryMessenger: binaryMessenger)
    if let api = api {
      pauseChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let textureIdArg = args[0] is Int64 ? args[0] as! Int64 : Int64(args[0] as! Int32)
        do {
          try api.pause(textureIdArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      pauseChannel.setMessageHandler(nil)
    }
    let disposeChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_core_image_filters.VideoPreviewApi.dispose", binaryMessenger: binaryMessenger)
    if let api = api {
      disposeChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let textureIdArg = args[0] is Int64 ? args[0] as! Int64 : Int64(args[0] as! Int32)
        do {
          try api.dispose(textureIdArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      disposeChannel.setMessageHandler(nil)
    }
  }
}
